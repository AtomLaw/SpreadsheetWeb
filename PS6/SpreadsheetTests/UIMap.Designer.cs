// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// SetCellContentsToStringTest1 - Use 'SetCellContentsToStringTest1Params' to pass parameters into this method.
        /// </summary>
        public void SetCellContentsToStringTest1()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            WinEdit uITxtBox_ValueEdit = this.UISimpleSheetsWindow.UITxtBox_ValueWindow.UITxtBox_ValueEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISimpleSheetsWindow = ApplicationUnderTest.Launch(this.SetCellContentsToStringTest1Params.UISimpleSheetsWindowExePath, this.SetCellContentsToStringTest1Params.UISimpleSheetsWindowAlternateExePath);

            // Type 'string' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.SetCellContentsToStringTest1Params.UITxtBox_ContentsEditText;

            // Type '{Enter}' in 'txtBox_Contents' text box
            Keyboard.SendKeys(uITxtBox_ContentsEdit, this.SetCellContentsToStringTest1Params.UITxtBox_ContentsEditSendKeys, ModifierKeys.None);

            // Click 'txtBox_Value' text box
            Mouse.Click(uITxtBox_ValueEdit, new Point(68, 5));
        }
        
        /// <summary>
        /// SetContentsOfCellToStringTest2 - Use 'SetContentsOfCellToStringTest2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SetContentsOfCellToStringTest2()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ValueEdit = this.UISimpleSheetsWindow.UITxtBox_ValueWindow.UITxtBox_ValueEdit;
            #endregion

            // Verify that 'txtBox_Value' text box's property 'ControlName' equals 'string'
            Assert.AreEqual(this.SetContentsOfCellToStringTest2ExpectedValues.UITxtBox_ValueEditControlName, uITxtBox_ValueEdit.ControlName);
        }
        
        /// <summary>
        /// StringAddedToA1 - Use 'StringAddedToA1Params' to pass parameters into this method.
        /// </summary>
        public void StringAddedToA1()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            WinButton uISetContentsButton = this.UISimpleSheetsWindow.UISetContentsWindow.UISetContentsButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISimpleSheetsWindow = ApplicationUnderTest.Launch(this.StringAddedToA1Params.UISimpleSheetsWindowExePath, this.StringAddedToA1Params.UISimpleSheetsWindowAlternateExePath);

            // Type 'word' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.StringAddedToA1Params.UITxtBox_ContentsEditText;

            // Click 'Set Contents' button
            Mouse.Click(uISetContentsButton, new Point(34, 5));
        }
        
        /// <summary>
        /// AssertValueDisplayed1 - Use 'AssertValueDisplayed1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertValueDisplayed1()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ValueEdit = this.UISimpleSheetsWindow.UITxtBox_ValueWindow.UITxtBox_ValueEdit;
            #endregion

            // Verify that 'txtBox_Value' text box's property 'ControlName' equals 'word'
            Assert.AreEqual(this.AssertValueDisplayed1ExpectedValues.UITxtBox_ValueEditControlName, uITxtBox_ValueEdit.ControlName);
        }
        
        /// <summary>
        /// AddFormulaToC1 - Use 'AddFormulaToC1Params' to pass parameters into this method.
        /// </summary>
        public void AddFormulaToC1()
        {
            #region Variable Declarations
            WinClient uISspClient = this.UISimpleSheetsWindow.UIItemWindow.UISspClient;
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            WinButton uISetContentsButton = this.UISimpleSheetsWindow.UISetContentsWindow.UISetContentsButton;
            #endregion

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(212, 41));

            // Type '=a1' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.AddFormulaToC1Params.UITxtBox_ContentsEditText;

            // Click 'Set Contents' button
            Mouse.Click(uISetContentsButton, new Point(65, 12));
        }
        
        /// <summary>
        /// AssertValueDisplayedIsFormulaError - Use 'AssertValueDisplayedIsFormulaErrorExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertValueDisplayedIsFormulaError()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ValueEdit = this.UISimpleSheetsWindow.UITxtBox_ValueWindow.UITxtBox_ValueEdit;
            #endregion

            // Verify that 'txtBox_Value' text box's property 'ControlName' equals 'Formula Error'
            Assert.AreEqual(this.AssertValueDisplayedIsFormulaErrorExpectedValues.UITxtBox_ValueEditControlName, uITxtBox_ValueEdit.ControlName);
        }
        
        /// <summary>
        /// ChangeA1ToDoubleValue - Use 'ChangeA1ToDoubleValueParams' to pass parameters into this method.
        /// </summary>
        public void ChangeA1ToDoubleValue()
        {
            #region Variable Declarations
            WinClient uISspClient = this.UISimpleSheetsWindow.UIItemWindow.UISspClient;
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            #endregion

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(57, 36));

            // Type '8' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.ChangeA1ToDoubleValueParams.UITxtBox_ContentsEditText;

            // Type '{Enter}' in 'txtBox_Contents' text box
            Keyboard.SendKeys(uITxtBox_ContentsEdit, this.ChangeA1ToDoubleValueParams.UITxtBox_ContentsEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// SetCellA1ToString1 - Use 'SetCellA1ToString1Params' to pass parameters into this method.
        /// </summary>
        public void SetCellA1ToString1()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            WinButton uISetContentsButton = this.UISimpleSheetsWindow.UISetContentsWindow.UISetContentsButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISimpleSheetsWindow = ApplicationUnderTest.Launch(this.SetCellA1ToString1Params.UISimpleSheetsWindowExePath, this.SetCellA1ToString1Params.UISimpleSheetsWindowAlternateExePath);

            // Type 'word' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.SetCellA1ToString1Params.UITxtBox_ContentsEditText;

            // Click 'Set Contents' button
            Mouse.Click(uISetContentsButton, new Point(42, 15));
        }
        
        /// <summary>
        /// AssertValueTxtBoxDisplaysString - Use 'AssertValueTxtBoxDisplaysStringExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertValueTxtBoxDisplaysString()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ValueEdit = this.UISimpleSheetsWindow.UITxtBox_ValueWindow.UITxtBox_ValueEdit;
            #endregion

            // Verify that 'txtBox_Value' text box's property 'Text' equals 'word'
            Assert.AreEqual(this.AssertValueTxtBoxDisplaysStringExpectedValues.UITxtBox_ValueEditText, uITxtBox_ValueEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISimpleSheetsWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UISimpleSheetsWindowExePath, this.RecordedMethod1Params.UISimpleSheetsWindowAlternateExePath);

            // Type 'word' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod1Params.UITxtBox_ContentsEditText;

            // Type '{Enter}' in 'txtBox_Contents' text box
            Keyboard.SendKeys(uITxtBox_ContentsEdit, this.RecordedMethod1Params.UITxtBox_ContentsEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ValueEdit = this.UISimpleSheetsWindow.UITxtBox_ValueWindow.UITxtBox_ValueEdit;
            #endregion

            // Verify that 'txtBox_Value' text box's property 'Text' equals 'word'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UITxtBox_ValueEditText, uITxtBox_ValueEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinClient uISspClient = this.UISimpleSheetsWindow.UIItemWindow.UISspClient;
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            #endregion

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(213, 41));

            // Type '=A1' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod2Params.UITxtBox_ContentsEditText;
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ValueEdit = this.UISimpleSheetsWindow.UITxtBox_ValueWindow.UITxtBox_ValueEdit;
            #endregion

            // Verify that 'txtBox_Value' text box's property 'Text' equals 'Formula Error'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UITxtBox_ValueEditText, uITxtBox_ValueEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinClient uISspClient = this.UISimpleSheetsWindow.UIItemWindow.UISspClient;
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            WinButton uISetContentsButton = this.UISimpleSheetsWindow.UISetContentsWindow.UISetContentsButton;
            #endregion

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(68, 33));

            // Type '=99*2' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod3Params.UITxtBox_ContentsEditText;

            // Click 'Set Contents' button
            Mouse.Click(uISetContentsButton, new Point(66, 15));
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ValueEdit = this.UISimpleSheetsWindow.UITxtBox_ValueWindow.UITxtBox_ValueEdit;
            #endregion

            // Verify that 'txtBox_Value' text box's property 'Text' equals '198'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UITxtBox_ValueEditText, uITxtBox_ValueEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            #endregion

            // Verify that 'txtBox_Contents' text box's property 'Text' equals '=99*2'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UITxtBox_ContentsEditText, uITxtBox_ContentsEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod5 - Use 'AssertMethod5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ValueEdit = this.UISimpleSheetsWindow.UITxtBox_ValueWindow.UITxtBox_ValueEdit;
            #endregion

            // Verify that 'txtBox_Value' text box's property 'Text' equals '198'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UITxtBox_ValueEditText, uITxtBox_ValueEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod6 - Use 'AssertMethod6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod6()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            #endregion

            // Verify that 'txtBox_Contents' text box's property 'Text' equals '=A1'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UITxtBox_ContentsEditText, uITxtBox_ContentsEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod4 - Use 'RecordedMethod4Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinClient uISspClient = this.UISimpleSheetsWindow.UIItemWindow.UISspClient;
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uISetContentsButton = this.UISimpleSheetsWindow.UISetContentsWindow.UISetContentsButton;
            #endregion

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(295, 36));

            // Type '=d100' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod4Params.UITxtBox_ContentsEditText;

            // Type '{Enter}' in 'txtBox_Contents' text box
            Keyboard.SendKeys(uITxtBox_ContentsEdit, this.RecordedMethod4Params.UITxtBox_ContentsEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.RecordedMethod4Params.UIOKButtonSendKeys, ModifierKeys.None);

            // Type '=6' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod4Params.UITxtBox_ContentsEditText1;

            // Click 'Set Contents' button
            Mouse.Click(uISetContentsButton, new Point(21, 12));

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(312, 57));

            // Type '=D1*D1' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod4Params.UITxtBox_ContentsEditText2;

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(282, 78));

            // Type '=D2*D2' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod4Params.UITxtBox_ContentsEditText3;

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(320, 88));

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(324, 99));

            // Type '=D3*D3' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod4Params.UITxtBox_ContentsEditText4;
        }
        
        /// <summary>
        /// AssertMethod7 - Use 'AssertMethod7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod7()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ValueEdit = this.UISimpleSheetsWindow.UITxtBox_ValueWindow.UITxtBox_ValueEdit;
            #endregion

            // Verify that 'txtBox_Value' text box's property 'Text' equals '1679616'
            Assert.AreEqual(this.AssertMethod7ExpectedValues.UITxtBox_ValueEditText, uITxtBox_ValueEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod8 - Use 'AssertMethod8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod8()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ValueEdit = this.UISimpleSheetsWindow.UITxtBox_ValueWindow.UITxtBox_ValueEdit;
            #endregion

            // Verify that 'txtBox_Value' text box's property 'Text' equals '0.666666666666667'
            Assert.AreEqual(this.AssertMethod8ExpectedValues.UITxtBox_ValueEditText, uITxtBox_ValueEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Type '=d3' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod5Params.UITxtBox_ContentsEditText;

            // Type '{Enter}' in 'txtBox_Contents' text box
            Keyboard.SendKeys(uITxtBox_ContentsEdit, this.RecordedMethod5Params.UITxtBox_ContentsEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.RecordedMethod5Params.UIOKButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RecordedMethod6 - Use 'RecordedMethod6Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UISimpleSheetsWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinMenuItem uISaveAsMenuItem = this.UISimpleSheetsWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinMenuItem uIOpenMenuItem = this.UISimpleSheetsWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uITypeEdit = this.UIOpenWindow.UIItemWindow.UISheet01ssListItem.UITypeEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinButton uIContinueButton = this.UISimpleSheetsWindow1.UISimpleSheetsClient.UIContinueButton;
            WinButton uICloseButton = this.UISimpleSheetsWindow.UISimpleSheetsTitleBar.UICloseButton;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(60, 8));

            // Select 'sheet01.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod6Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(49, 6));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(54, 15));

            // Click 'File' -> 'Save As..' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(64, 9));

            // Select 'sheet02.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod6Params.UIFilenameComboBoxEditableItem1;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod6Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(39, 6));

            // Click 'File' -> 'Save As..' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(62, 9));

            // Select 'sheet02.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod6Params.UIFilenameComboBoxEditableItem2;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod6Params.UIFilenameEditSendKeys1, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(66, 13));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(55, 17));

            // Click 'Type' text box
            Mouse.Click(uITypeEdit, new Point(40, 9));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(42, 5));

            // Click '&Continue' button
            Mouse.Click(uIContinueButton, new Point(69, 10));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 11));
        }
        
        /// <summary>
        /// RecordedMethod7 - Use 'RecordedMethod7Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISimpleSheetsWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uITypeEdit = this.UIOpenWindow.UIItemWindow.UISimpleSheet2ssListItem.UITypeEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinClient uISspClient = this.UISimpleSheetsWindow1.UIItemWindow.UISspClient;
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow1.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            WinButton uICloseButton = this.UISimpleSheetsWindow1.UISimpleSheetsTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIChangesHaveBeenMadeWindow.UIYesWindow.UIYesButton;
            WinSplitButton uIOpenSplitButton1 = this.UIOpenWindow.UIOpenWindow2.UIOpenSplitButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISimpleSheetsWindow = ApplicationUnderTest.Launch(this.RecordedMethod7Params.UISimpleSheetsWindowExePath, this.RecordedMethod7Params.UISimpleSheetsWindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(37, 9));

            // Click 'Type' text box
            Mouse.Click(uITypeEdit, new Point(44, 4));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(32, 12));

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(240, 125));

            // Type 'added' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod7Params.UITxtBox_ContentsEditText;

            // Type '{Enter}' in 'txtBox_Contents' text box
            Keyboard.SendKeys(uITxtBox_ContentsEdit, this.RecordedMethod7Params.UITxtBox_ContentsEditSendKeys, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 15));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(39, 7));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(59, 5));

            // Click 'Type' text box
            Mouse.Click(uITypeEdit, new Point(49, 13));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton1, new Point(35, 12));

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(318, 35));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(28, 9));
        }
        
        /// <summary>
        /// RecordedMethod8 - Use 'RecordedMethod8Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod8()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            WinClient uISspClient = this.UISimpleSheetsWindow.UIItemWindow.UISspClient;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISimpleSheetsWindow = ApplicationUnderTest.Launch(this.RecordedMethod8Params.UISimpleSheetsWindowExePath, this.RecordedMethod8Params.UISimpleSheetsWindowAlternateExePath);

            // Type 'word' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod8Params.UITxtBox_ContentsEditText;

            // Type '{Enter}' in 'txtBox_Contents' text box
            Keyboard.SendKeys(uITxtBox_ContentsEdit, this.RecordedMethod8Params.UITxtBox_ContentsEditSendKeys, ModifierKeys.None);

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(794, 41));

            // Type '=A1' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod8Params.UITxtBox_ContentsEditText1;

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(72, 36));

            // Type '9' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod8Params.UITxtBox_ContentsEditText2;

            // Type '{Enter}' in 'txtBox_Contents' text box
            Keyboard.SendKeys(uITxtBox_ContentsEdit, this.RecordedMethod8Params.UITxtBox_ContentsEditSendKeys1, ModifierKeys.None);

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(303, 43));

            // Type '=J1*A1+2' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod8Params.UITxtBox_ContentsEditText3;

            // Click 'ssp' client
            Mouse.Click(uISspClient, new Point(469, 38));

            // Type '=D1+(2*7)' in 'txtBox_Contents' text box
            uITxtBox_ContentsEdit.Text = this.RecordedMethod8Params.UITxtBox_ContentsEditText4;
        }
        
        /// <summary>
        /// AssertMethod9 - Use 'AssertMethod9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod9()
        {
            #region Variable Declarations
            WinEdit uITxtBox_ContentsEdit = this.UISimpleSheetsWindow.UITxtBox_ContentsWindow.UITxtBox_ContentsEdit;
            #endregion

            // Verify that 'txtBox_Contents' text box's property 'Text' equals '=D1+(2*7)'
            Assert.AreEqual(this.AssertMethod9ExpectedValues.UITxtBox_ContentsEditText, uITxtBox_ContentsEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod9
        /// </summary>
        public void RecordedMethod9()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISimpleSheetsWindow.UISimpleSheetsTitleBar.UICloseButton;
            WinButton uINOButton = this.UIChangesHaveBeenMadeWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 6));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(55, 17));
        }
        
        #region Properties
        public virtual SetCellContentsToStringTest1Params SetCellContentsToStringTest1Params
        {
            get
            {
                if ((this.mSetCellContentsToStringTest1Params == null))
                {
                    this.mSetCellContentsToStringTest1Params = new SetCellContentsToStringTest1Params();
                }
                return this.mSetCellContentsToStringTest1Params;
            }
        }
        
        public virtual SetContentsOfCellToStringTest2ExpectedValues SetContentsOfCellToStringTest2ExpectedValues
        {
            get
            {
                if ((this.mSetContentsOfCellToStringTest2ExpectedValues == null))
                {
                    this.mSetContentsOfCellToStringTest2ExpectedValues = new SetContentsOfCellToStringTest2ExpectedValues();
                }
                return this.mSetContentsOfCellToStringTest2ExpectedValues;
            }
        }
        
        public virtual StringAddedToA1Params StringAddedToA1Params
        {
            get
            {
                if ((this.mStringAddedToA1Params == null))
                {
                    this.mStringAddedToA1Params = new StringAddedToA1Params();
                }
                return this.mStringAddedToA1Params;
            }
        }
        
        public virtual AssertValueDisplayed1ExpectedValues AssertValueDisplayed1ExpectedValues
        {
            get
            {
                if ((this.mAssertValueDisplayed1ExpectedValues == null))
                {
                    this.mAssertValueDisplayed1ExpectedValues = new AssertValueDisplayed1ExpectedValues();
                }
                return this.mAssertValueDisplayed1ExpectedValues;
            }
        }
        
        public virtual AddFormulaToC1Params AddFormulaToC1Params
        {
            get
            {
                if ((this.mAddFormulaToC1Params == null))
                {
                    this.mAddFormulaToC1Params = new AddFormulaToC1Params();
                }
                return this.mAddFormulaToC1Params;
            }
        }
        
        public virtual AssertValueDisplayedIsFormulaErrorExpectedValues AssertValueDisplayedIsFormulaErrorExpectedValues
        {
            get
            {
                if ((this.mAssertValueDisplayedIsFormulaErrorExpectedValues == null))
                {
                    this.mAssertValueDisplayedIsFormulaErrorExpectedValues = new AssertValueDisplayedIsFormulaErrorExpectedValues();
                }
                return this.mAssertValueDisplayedIsFormulaErrorExpectedValues;
            }
        }
        
        public virtual ChangeA1ToDoubleValueParams ChangeA1ToDoubleValueParams
        {
            get
            {
                if ((this.mChangeA1ToDoubleValueParams == null))
                {
                    this.mChangeA1ToDoubleValueParams = new ChangeA1ToDoubleValueParams();
                }
                return this.mChangeA1ToDoubleValueParams;
            }
        }
        
        public virtual SetCellA1ToString1Params SetCellA1ToString1Params
        {
            get
            {
                if ((this.mSetCellA1ToString1Params == null))
                {
                    this.mSetCellA1ToString1Params = new SetCellA1ToString1Params();
                }
                return this.mSetCellA1ToString1Params;
            }
        }
        
        public virtual AssertValueTxtBoxDisplaysStringExpectedValues AssertValueTxtBoxDisplaysStringExpectedValues
        {
            get
            {
                if ((this.mAssertValueTxtBoxDisplaysStringExpectedValues == null))
                {
                    this.mAssertValueTxtBoxDisplaysStringExpectedValues = new AssertValueTxtBoxDisplaysStringExpectedValues();
                }
                return this.mAssertValueTxtBoxDisplaysStringExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public virtual AssertMethod6ExpectedValues AssertMethod6ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod6ExpectedValues == null))
                {
                    this.mAssertMethod6ExpectedValues = new AssertMethod6ExpectedValues();
                }
                return this.mAssertMethod6ExpectedValues;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public virtual AssertMethod7ExpectedValues AssertMethod7ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod7ExpectedValues == null))
                {
                    this.mAssertMethod7ExpectedValues = new AssertMethod7ExpectedValues();
                }
                return this.mAssertMethod7ExpectedValues;
            }
        }
        
        public virtual AssertMethod8ExpectedValues AssertMethod8ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod8ExpectedValues == null))
                {
                    this.mAssertMethod8ExpectedValues = new AssertMethod8ExpectedValues();
                }
                return this.mAssertMethod8ExpectedValues;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual RecordedMethod6Params RecordedMethod6Params
        {
            get
            {
                if ((this.mRecordedMethod6Params == null))
                {
                    this.mRecordedMethod6Params = new RecordedMethod6Params();
                }
                return this.mRecordedMethod6Params;
            }
        }
        
        public virtual RecordedMethod7Params RecordedMethod7Params
        {
            get
            {
                if ((this.mRecordedMethod7Params == null))
                {
                    this.mRecordedMethod7Params = new RecordedMethod7Params();
                }
                return this.mRecordedMethod7Params;
            }
        }
        
        public virtual RecordedMethod8Params RecordedMethod8Params
        {
            get
            {
                if ((this.mRecordedMethod8Params == null))
                {
                    this.mRecordedMethod8Params = new RecordedMethod8Params();
                }
                return this.mRecordedMethod8Params;
            }
        }
        
        public virtual AssertMethod9ExpectedValues AssertMethod9ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod9ExpectedValues == null))
                {
                    this.mAssertMethod9ExpectedValues = new AssertMethod9ExpectedValues();
                }
                return this.mAssertMethod9ExpectedValues;
            }
        }
        
        public UISimpleSheetsWindow UISimpleSheetsWindow
        {
            get
            {
                if ((this.mUISimpleSheetsWindow == null))
                {
                    this.mUISimpleSheetsWindow = new UISimpleSheetsWindow();
                }
                return this.mUISimpleSheetsWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UISimpleSheetsWindow1 UISimpleSheetsWindow1
        {
            get
            {
                if ((this.mUISimpleSheetsWindow1 == null))
                {
                    this.mUISimpleSheetsWindow1 = new UISimpleSheetsWindow1();
                }
                return this.mUISimpleSheetsWindow1;
            }
        }
        
        public UIChangesHaveBeenMadeWindow UIChangesHaveBeenMadeWindow
        {
            get
            {
                if ((this.mUIChangesHaveBeenMadeWindow == null))
                {
                    this.mUIChangesHaveBeenMadeWindow = new UIChangesHaveBeenMadeWindow();
                }
                return this.mUIChangesHaveBeenMadeWindow;
            }
        }
        #endregion
        
        #region Fields
        private SetCellContentsToStringTest1Params mSetCellContentsToStringTest1Params;
        
        private SetContentsOfCellToStringTest2ExpectedValues mSetContentsOfCellToStringTest2ExpectedValues;
        
        private StringAddedToA1Params mStringAddedToA1Params;
        
        private AssertValueDisplayed1ExpectedValues mAssertValueDisplayed1ExpectedValues;
        
        private AddFormulaToC1Params mAddFormulaToC1Params;
        
        private AssertValueDisplayedIsFormulaErrorExpectedValues mAssertValueDisplayedIsFormulaErrorExpectedValues;
        
        private ChangeA1ToDoubleValueParams mChangeA1ToDoubleValueParams;
        
        private SetCellA1ToString1Params mSetCellA1ToString1Params;
        
        private AssertValueTxtBoxDisplaysStringExpectedValues mAssertValueTxtBoxDisplaysStringExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private AssertMethod6ExpectedValues mAssertMethod6ExpectedValues;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private AssertMethod7ExpectedValues mAssertMethod7ExpectedValues;
        
        private AssertMethod8ExpectedValues mAssertMethod8ExpectedValues;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private RecordedMethod6Params mRecordedMethod6Params;
        
        private RecordedMethod7Params mRecordedMethod7Params;
        
        private RecordedMethod8Params mRecordedMethod8Params;
        
        private AssertMethod9ExpectedValues mAssertMethod9ExpectedValues;
        
        private UISimpleSheetsWindow mUISimpleSheetsWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UISimpleSheetsWindow1 mUISimpleSheetsWindow1;
        
        private UIChangesHaveBeenMadeWindow mUIChangesHaveBeenMadeWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetCellContentsToStringTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SetCellContentsToStringTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISimpleSheetsWindowExePath = "C:\\Users\\Spaldex\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISimpleSheetsWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'string' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText = "string";
        
        /// <summary>
        /// Type '{Enter}' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetContentsOfCellToStringTest2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SetContentsOfCellToStringTest2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'txtBox_Value' text box's property 'ControlName' equals 'string'
        /// </summary>
        public string UITxtBox_ValueEditControlName = "string";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'StringAddedToA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class StringAddedToA1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISimpleSheetsWindowExePath = "C:\\Users\\Spaldex\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISimpleSheetsWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'word' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText = "word";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertValueDisplayed1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertValueDisplayed1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'txtBox_Value' text box's property 'ControlName' equals 'word'
        /// </summary>
        public string UITxtBox_ValueEditControlName = "word";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddFormulaToC1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AddFormulaToC1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=a1' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText = "=a1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertValueDisplayedIsFormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertValueDisplayedIsFormulaErrorExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'txtBox_Value' text box's property 'ControlName' equals 'Formula Error'
        /// </summary>
        public string UITxtBox_ValueEditControlName = "Formula Error";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeA1ToDoubleValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ChangeA1ToDoubleValueParams
    {
        
        #region Fields
        /// <summary>
        /// Type '8' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText = "8";
        
        /// <summary>
        /// Type '{Enter}' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetCellA1ToString1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SetCellA1ToString1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISimpleSheetsWindowExePath = "C:\\Users\\Spaldex\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISimpleSheetsWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'word' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText = "word";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertValueTxtBoxDisplaysString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertValueTxtBoxDisplaysStringExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'txtBox_Value' text box's property 'Text' equals 'word'
        /// </summary>
        public string UITxtBox_ValueEditText = "word";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISimpleSheetsWindowExePath = "C:\\Users\\Spaldex\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISimpleSheetsWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'word' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText = "word";
        
        /// <summary>
        /// Type '{Enter}' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'txtBox_Value' text box's property 'Text' equals 'word'
        /// </summary>
        public string UITxtBox_ValueEditText = "word";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText = "=A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'txtBox_Value' text box's property 'Text' equals 'Formula Error'
        /// </summary>
        public string UITxtBox_ValueEditText = "Formula Error";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=99*2' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText = "=99*2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'txtBox_Value' text box's property 'Text' equals '198'
        /// </summary>
        public string UITxtBox_ValueEditText = "198";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'txtBox_Contents' text box's property 'Text' equals '=99*2'
        /// </summary>
        public string UITxtBox_ContentsEditText = "=99*2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'txtBox_Value' text box's property 'Text' equals '198'
        /// </summary>
        public string UITxtBox_ValueEditText = "198";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'txtBox_Contents' text box's property 'Text' equals '=A1'
        /// </summary>
        public string UITxtBox_ContentsEditText = "=A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=d100' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText = "=d100";
        
        /// <summary>
        /// Type '{Enter}' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=6' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText1 = "=6";
        
        /// <summary>
        /// Type '=D1*D1' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText2 = "=D1*D1";
        
        /// <summary>
        /// Type '=D2*D2' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText3 = "=D2*D2";
        
        /// <summary>
        /// Type '=D3*D3' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText4 = "=D3*D3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'txtBox_Value' text box's property 'Text' equals '1679616'
        /// </summary>
        public string UITxtBox_ValueEditText = "1679616";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'txtBox_Value' text box's property 'Text' equals '0.666666666666667'
        /// </summary>
        public string UITxtBox_ValueEditText = "0.666666666666667";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=d3' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText = "=d3";
        
        /// <summary>
        /// Type '{Enter}' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod6Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'sheet01.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "sheet01.ss";
        
        /// <summary>
        /// Select 'sheet02.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "sheet02.ss";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'sheet02.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem2 = "sheet02.ss";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod7Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISimpleSheetsWindowExePath = "C:\\Users\\Spaldex\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISimpleSheetsWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'added' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText = "added";
        
        /// <summary>
        /// Type '{Enter}' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod8Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISimpleSheetsWindowExePath = "C:\\Users\\Spaldex\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISimpleSheetsWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'word' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText = "word";
        
        /// <summary>
        /// Type '{Enter}' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText1 = "=A1";
        
        /// <summary>
        /// Type '9' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText2 = "9";
        
        /// <summary>
        /// Type '{Enter}' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=J1*A1+2' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText3 = "=J1*A1+2";
        
        /// <summary>
        /// Type '=D1+(2*7)' in 'txtBox_Contents' text box
        /// </summary>
        public string UITxtBox_ContentsEditText4 = "=D1+(2*7)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'txtBox_Contents' text box's property 'Text' equals '=D1+(2*7)'
        /// </summary>
        public string UITxtBox_ContentsEditText = "=D1+(2*7)";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISimpleSheetsWindow : WinWindow
    {
        
        public UISimpleSheetsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "SimpleSheets";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("SimpleSheets");
            #endregion
        }
        
        #region Properties
        public UITxtBox_ContentsWindow UITxtBox_ContentsWindow
        {
            get
            {
                if ((this.mUITxtBox_ContentsWindow == null))
                {
                    this.mUITxtBox_ContentsWindow = new UITxtBox_ContentsWindow(this);
                }
                return this.mUITxtBox_ContentsWindow;
            }
        }
        
        public UITxtBox_ValueWindow UITxtBox_ValueWindow
        {
            get
            {
                if ((this.mUITxtBox_ValueWindow == null))
                {
                    this.mUITxtBox_ValueWindow = new UITxtBox_ValueWindow(this);
                }
                return this.mUITxtBox_ValueWindow;
            }
        }
        
        public UISetContentsWindow UISetContentsWindow
        {
            get
            {
                if ((this.mUISetContentsWindow == null))
                {
                    this.mUISetContentsWindow = new UISetContentsWindow(this);
                }
                return this.mUISetContentsWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISimpleSheetsTitleBar UISimpleSheetsTitleBar
        {
            get
            {
                if ((this.mUISimpleSheetsTitleBar == null))
                {
                    this.mUISimpleSheetsTitleBar = new UISimpleSheetsTitleBar(this);
                }
                return this.mUISimpleSheetsTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UITxtBox_ContentsWindow mUITxtBox_ContentsWindow;
        
        private UITxtBox_ValueWindow mUITxtBox_ValueWindow;
        
        private UISetContentsWindow mUISetContentsWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UISimpleSheetsTitleBar mUISimpleSheetsTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITxtBox_ContentsWindow : WinWindow
    {
        
        public UITxtBox_ContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtBox_Contents";
            this.WindowTitles.Add("SimpleSheets");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtBox_ContentsEdit
        {
            get
            {
                if ((this.mUITxtBox_ContentsEdit == null))
                {
                    this.mUITxtBox_ContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtBox_ContentsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value";
                    this.mUITxtBox_ContentsEdit.WindowTitles.Add("SimpleSheets");
                    #endregion
                }
                return this.mUITxtBox_ContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtBox_ContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITxtBox_ValueWindow : WinWindow
    {
        
        public UITxtBox_ValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtBox_Value";
            this.WindowTitles.Add("SimpleSheets");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtBox_ValueEdit
        {
            get
            {
                if ((this.mUITxtBox_ValueEdit == null))
                {
                    this.mUITxtBox_ValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtBox_ValueEdit.WindowTitles.Add("SimpleSheets");
                    #endregion
                }
                return this.mUITxtBox_ValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtBox_ValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISetContentsWindow : WinWindow
    {
        
        public UISetContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btn_SetContents";
            this.WindowTitles.Add("SimpleSheets");
            #endregion
        }
        
        #region Properties
        public WinButton UISetContentsButton
        {
            get
            {
                if ((this.mUISetContentsButton == null))
                {
                    this.mUISetContentsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISetContentsButton.SearchProperties[WinButton.PropertyNames.Name] = "Set Contents";
                    this.mUISetContentsButton.WindowTitles.Add("SimpleSheets");
                    #endregion
                }
                return this.mUISetContentsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISetContentsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("SimpleSheets");
            #endregion
        }
        
        #region Properties
        public WinClient UISspClient
        {
            get
            {
                if ((this.mUISspClient == null))
                {
                    this.mUISspClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISspClient.WindowTitles.Add("SimpleSheets");
                    #endregion
                }
                return this.mUISspClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISspClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("SimpleSheets");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("SimpleSheets");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("SimpleSheets");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As..";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("SimpleSheets");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("SimpleSheets");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISimpleSheetsTitleBar : WinTitleBar
    {
        
        public UISimpleSheetsTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("SimpleSheets");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("SimpleSheets");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIOpenWindow2 UIOpenWindow2
        {
            get
            {
                if ((this.mUIOpenWindow2 == null))
                {
                    this.mUIOpenWindow2 = new UIOpenWindow2(this);
                }
                return this.mUIOpenWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIOpenWindow2 mUIOpenWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UISheet01ssListItem UISheet01ssListItem
        {
            get
            {
                if ((this.mUISheet01ssListItem == null))
                {
                    this.mUISheet01ssListItem = new UISheet01ssListItem(this);
                }
                return this.mUISheet01ssListItem;
            }
        }
        
        public UISimpleSheet2ssListItem UISimpleSheet2ssListItem
        {
            get
            {
                if ((this.mUISimpleSheet2ssListItem == null))
                {
                    this.mUISimpleSheet2ssListItem = new UISimpleSheet2ssListItem(this);
                }
                return this.mUISimpleSheet2ssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISheet01ssListItem mUISheet01ssListItem;
        
        private UISimpleSheet2ssListItem mUISimpleSheet2ssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISheet01ssListItem : WinListItem
    {
        
        public UISheet01ssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "sheet01.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UITypeEdit
        {
            get
            {
                if ((this.mUITypeEdit == null))
                {
                    this.mUITypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Type";
                    this.mUITypeEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUITypeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITypeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISimpleSheet2ssListItem : WinListItem
    {
        
        public UISimpleSheet2ssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SimpleSheet2.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UITypeEdit
        {
            get
            {
                if ((this.mUITypeEdit == null))
                {
                    this.mUITypeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITypeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Type";
                    this.mUITypeEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUITypeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITypeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow2 : WinWindow
    {
        
        public UIOpenWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISimpleSheetsWindow1 : WinWindow
    {
        
        public UISimpleSheetsWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "SimpleSheets";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("SimpleSheets");
            #endregion
        }
        
        #region Properties
        public UISimpleSheetsClient UISimpleSheetsClient
        {
            get
            {
                if ((this.mUISimpleSheetsClient == null))
                {
                    this.mUISimpleSheetsClient = new UISimpleSheetsClient(this);
                }
                return this.mUISimpleSheetsClient;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UITxtBox_ContentsWindow1 UITxtBox_ContentsWindow
        {
            get
            {
                if ((this.mUITxtBox_ContentsWindow == null))
                {
                    this.mUITxtBox_ContentsWindow = new UITxtBox_ContentsWindow1(this);
                }
                return this.mUITxtBox_ContentsWindow;
            }
        }
        
        public UISimpleSheetsTitleBar1 UISimpleSheetsTitleBar
        {
            get
            {
                if ((this.mUISimpleSheetsTitleBar == null))
                {
                    this.mUISimpleSheetsTitleBar = new UISimpleSheetsTitleBar1(this);
                }
                return this.mUISimpleSheetsTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISimpleSheetsClient mUISimpleSheetsClient;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UITxtBox_ContentsWindow1 mUITxtBox_ContentsWindow;
        
        private UISimpleSheetsTitleBar1 mUISimpleSheetsTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISimpleSheetsClient : WinClient
    {
        
        public UISimpleSheetsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "SimpleSheets";
            this.WindowTitles.Add("SimpleSheets");
            #endregion
        }
        
        #region Properties
        public WinButton UIContinueButton
        {
            get
            {
                if ((this.mUIContinueButton == null))
                {
                    this.mUIContinueButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIContinueButton.SearchProperties[WinButton.PropertyNames.Name] = "Continue";
                    this.mUIContinueButton.WindowTitles.Add("SimpleSheets");
                    #endregion
                }
                return this.mUIContinueButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIContinueButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "6";
            this.WindowTitles.Add("SimpleSheets");
            #endregion
        }
        
        #region Properties
        public WinClient UISspClient
        {
            get
            {
                if ((this.mUISspClient == null))
                {
                    this.mUISspClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISspClient.WindowTitles.Add("SimpleSheets");
                    #endregion
                }
                return this.mUISspClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISspClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITxtBox_ContentsWindow1 : WinWindow
    {
        
        public UITxtBox_ContentsWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtBox_Contents";
            this.WindowTitles.Add("SimpleSheets");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtBox_ContentsEdit
        {
            get
            {
                if ((this.mUITxtBox_ContentsEdit == null))
                {
                    this.mUITxtBox_ContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtBox_ContentsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value";
                    this.mUITxtBox_ContentsEdit.WindowTitles.Add("SimpleSheets");
                    #endregion
                }
                return this.mUITxtBox_ContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtBox_ContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISimpleSheetsTitleBar1 : WinTitleBar
    {
        
        public UISimpleSheetsTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("SimpleSheets");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("SimpleSheets");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIChangesHaveBeenMadeWindow : WinWindow
    {
        
        public UIChangesHaveBeenMadeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Changes Have Been Made";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Changes Have Been Made");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Changes Have Been Made");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Changes Have Been Made");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Changes Have Been Made");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Changes Have Been Made");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
}
